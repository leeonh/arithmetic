package day12

func rob(nums []int) int {
	// 因为不能同时偷相邻的两间房子，所以得隔一个偷，那么就需要对比了
	// 例如 A B C 三家，那只要判断A + B > C ?，你就知道要选哪条线了
	// 找个例子直接枚举所有的情况来分析一下 1 3 6 5 2 3
	// 我们起始分别用3个指针，分别对应1，3，6这三个数
	// 1 + 6 > 3，然后3个指针都向右移动一位，来到了3，6，5
	// 如果选择了6这条线的话，那么偷到6这一家的时候，已经偷了最多的1+6=7元了，
	// 也就变成了3，7，5， 3个指针再往后移动一位，就变成了7，3+5，2（7，8，2）， 再次向后移动，来到8，9，3，此时做最后一次对比，(8+3) > 9 ? (8+3) : 9，因此返回最终答案8+3=11，返回11元就是能偷到的最多的钱
	n := len(nums)
	if n == 1 {
		return nums[0]
	} else if n == 2 {
		return max(nums[0], nums[1])
	}

	for i := 2; i < len(nums); i++ {
		// 例子：1 3 6 5 2 3
		// 例如第一轮i=2，那三个指针分别是1，3，6
		nums[i] = max(nums[i-2]+nums[i], nums[i-1])
	}
	return nums[n-1]
}

func max(a, b int) int {
	if a >= b {
		return a
	} else {
		return b
	}
}
